import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from db_manager import add_request_to_db



# –ø–µ—Ä–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–±–º–µ–Ω—É
async def exchange(update:Update, context:CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üí∞ –•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å", callback_data = "want_to_get_money")],
        [InlineKeyboardButton("üíµ –£ –º–µ–Ω—è –µ—Å—Ç—å", callback_data = "have_money")]
        ]  
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ –æ–±–º–µ–Ω—É
async def button_handler(update:Update, context:CallbackContext):
    query = update.callback_query
    await query.answer()

    currency_mode = {
        "want_to_get_money":1,
        "have_money":2
    }

    if query.data in currency_mode:
        context.user_data["main_currency"] = currency_mode[query.data]
        text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:" if query.data == "want_to_get_money" else "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å –µ—Å—Ç—å:"

    context.user_data["waiting_for_amount"] = True
    await query.message.reply_text(text)


# –≤–≤–æ–¥–∏–º —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞
async def amount_input(update:Update, context:CallbackContext):
    if not context.user_data.get("waiting_for_amount"):
        return
    number = update.message.text.strip()
    check_number= re.fullmatch(r'\d+([.,]\d+)?$',number)

    if check_number:
        context.user_data["waiting_for_amount"] = False
        if '.' in number or ',' in number:
            context.user_data["amount"] = float(re.sub(r'[.,]', '.', number))
        else:
            context.user_data["amount"] = int(number)        
        await choose_currency(update, context)    

    else:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞! –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")



# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Å —Å –∏ –Ω–∞ —á—Ç–æ
async def choose_currency(update:Update, context:CallbackContext):

    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É–±–ª–∏", callback_data="from_rub"), InlineKeyboardButton("üá∑üá∫ –†—É–±–ª–∏", callback_data="to_rub")],
        [InlineKeyboardButton("üá∫üá∏ –î–æ–ª–ª–∞—Ä—ã", callback_data="from_usd"), InlineKeyboardButton("üá∫üá∏ –î–æ–ª–ª–∞—Ä—ã", callback_data="to_usd")],
        [InlineKeyboardButton("üáπüá≠ –ë–∞—Ç—ã", callback_data="from_thb"), InlineKeyboardButton("üáπüá≠ –ë–∞—Ç—ã", callback_data="to_thb")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("   üí∏ –ú–µ–Ω—è—é:                 üí∞ –ü–æ–ª—É—á–∞—é:", reply_markup=reply_markup)
 




# –æ–±—Ä–±–∞–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç - –Ω–∞–∂–∞—Ç—å 2 –∫–Ω–æ–ø–∫–∏
async def currency_choice(update:Update, context:CallbackContext):
    if context.user_data["waiting_for_amount"] == False:

        query = update.callback_query
        await query.answer()
        currency_mapping = {
            'from_rub':'RUB',
            'from_usd':'USD',
            'from_thb':'THB',
            'to_rub':'RUB',
            'to_usd':'USD',
            'to_thb':'THB'
        }

        if query.data.startswith('from'):
            context.user_data['from'] = currency_mapping[query.data]
        elif query.data.startswith('to'):
            context.user_data['to'] = currency_mapping[query.data]

        from_currency = context.user_data.get('from')   
        to_currency = context.user_data.get('to') 
        sum_to_change = context.user_data.get('amount', 0) 

        if from_currency and to_currency:
            text = f'{from_currency} —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {sum_to_change} {to_currency}' if context.user_data['main_currency'] == 1 else f'{sum_to_change} {from_currency} –Ω–∞ {to_currency}'
            await query.message.reply_text(f'–í—ã –º–µ–Ω—è–µ—Ç–µ {text}')
            await get_exchange_rate(update,from_currency, to_currency)
            await calculate_exchange(update,context)
            await repeat_exchange(update,context)
            return

        else:
            await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É')


# –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π –æ–±–º–µ–Ω
async def repeat_exchange(update:Update, context:CallbackContext):
    key_board = [[InlineKeyboardButton("–î–∞", callback_data = 'Yes')], [InlineKeyboardButton("–ù–µ—Ç", callback_data = 'No')]]
    reply_markup = InlineKeyboardMarkup(key_board)
    await update.callback_query.message.reply_text("–°–¥–µ–ª–∞—Ç—å –Ω–≤—ã–π –æ–±–º–µ–Ω?", reply_markup=reply_markup )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–≤–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
async def new_exchange(update:Update, context:CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "Yes":
        await exchange(update, context)
    else:
        await query.message.reply_text("–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!")


# –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ê–ü–ò
async def get_exchange_rate(update:Update, from_currency, to_currency):
    url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"

    try:
        response = requests.get(url)
        data = response.json()
        if 'rates' in data and to_currency in data["rates"]:
            return data['rates'][to_currency]
        else:
            await update.message.reply_text(f"‚ùå –ö—É—Ä—Å –¥–ª—è {to_currency} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}')
        return None
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return None




# —Å—á–∏—Ç–∞–µ–º –∫—É—Ä—Å –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
async def calculate_exchange(update: Update, context: CallbackContext):
    from_currency = context.user_data.get('from')   
    to_currency = context.user_data.get('to') 
    amount = context.user_data.get('amount', 0) 

    if not from_currency or not to_currency or amount == 0:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω—ã –≤–∞–ª—é—Ç—ã –∏–ª–∏ —Å—É–º–º–∞.")
        return

    rate = await get_exchange_rate(update, from_currency, to_currency)
    if rate is None:
        return
    
    
    converted_amount = round(amount * rate,2) if context.user_data["main_currency"] == 2 else round(amount/rate,2) 

    if context.user_data["main_currency"] == 2:
        text = f"üí∞ –í—ã –º–µ–Ω—è–µ—Ç–µ {amount} {from_currency} –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {converted_amount} {to_currency}"
    else:
        text = f"–í–∞–º –Ω—É–∂–Ω–æ {converted_amount} {from_currency}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å üí∞ {amount} {to_currency}"

    await update.callback_query.message.reply_text(f"üí± –ö—É—Ä—Å {from_currency} ‚Üí {to_currency}: {rate}\n{text}")

    context.user_data.clear()

    username = update.callback_query.from_user.username
    full_name = update.callback_query.from_user.first_name
    add_request_to_db(username, full_name, '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã') 











