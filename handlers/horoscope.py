import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from db_manager import add_request_to_db
from deep_translator import GoogleTranslator



# —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
async def horoscope(update:Update, context:CallbackContext):
    zodiac_signs= [
        ("‚ôà –û–≤–µ–Ω", "zodiac_aries"), ("‚ôâ –¢–µ–ª–µ—Ü", "zodiac_taurus"), ("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "zodiac_gemini"),
    ("‚ôã –†–∞–∫", "zodiac_cancer"), ("‚ôå –õ–µ–≤", "zodiac_leo"), ("‚ôç –î–µ–≤–∞", "zodiac_virgo"),
    ("‚ôé –í–µ—Å—ã", "zodiac_libra"), ("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "zodiac_scorpio"), ("‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "zodiac_sagittarius"),
    ("‚ôë –ö–æ–∑–µ—Ä–æ–≥", "zodiac_capricorn"), ("‚ôí –í–æ–¥–æ–ª–µ–π", "zodiac_aquarius"), ("‚ôì –†—ã–±—ã", "zodiac_pisces")
    ]
    keyboard = []
    row = []

    for i, (name, value) in enumerate(zodiac_signs, start = 1):
        row.append(InlineKeyboardButton(name,callback_data=value))
        if i%3==0:
            keyboard.append(row)
            row = []

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=reply_markup)


# –æ–±—Ä–±–∞–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–∫–∞–∑ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
async def handle_horoscope_choice (update:Update, context:CallbackContext):
    query = update.callback_query
    await query.answer()

    zodiac_translation = {
        "aries": "–û–≤–µ–Ω", "taurus": "–¢–µ–ª–µ—Ü", "gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã",
        "cancer": "–†–∞–∫", "leo": "–õ–µ–≤", "virgo": "–î–µ–≤–∞",
        "libra": "–í–µ—Å—ã", "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω", "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü",
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥", "aquarius": "–í–æ–¥–æ–ª–µ–π", "pisces": "–†—ã–±—ã"
    }

    if query.data.startswith('zodiac_'):
        sign = query.data.split('_')[1]
        context.user_data['zodiac_sign'] = sign
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫: {zodiac_translation[sign]}")  # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        horoscope = await get_horoscope(sign)
        await query.message.reply_text(horoscope)
        
        username = query.from_user.username
        full_name = query.from_user.first_name
        await add_request_to_db(username, full_name, '–ì–æ—Ä–æ—Å–∫–æ–ø')


    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.")
        


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø (–∞–ø–∏ –∑–∞–ø—Ä–æ—Å)
async def get_horoscope(sign):
   
    url = f'https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily?sign={sign}&day=TODAY'

    try:
        response = requests.get(url)
        answer= response.json().get('data')

        if 'date' in answer and 'horoscope_data' in answer:
            return (f"üîÆ –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {answer['date']}:\n\n"
                            f"{GoogleTranslator(source='auto', target='ru').translate(answer['horoscope_data'])}\n\n"
                            f"‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!")
        else:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


    except requests.exceptions.RequestException as e:
        return f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"


    